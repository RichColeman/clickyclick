{"version":3,"sources":["components/Header.js","components/Tile.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","message","currentScore","topscore","Tile","onClick","handleTileClick","id","alt","player","src","image","char","App","state","tiles","checked","_this","forEach","tile","setState","slice","sort","Math","random","_this2","this","map","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1249093f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default (props) => {\n    return (<header className=\"inner-container\">\n        <div>76ers Memory Game</div>\n        <div>{props.message}</div>\n        <div>Current score:{props.currentScore}</div>\n        <div>Top score:{props.topscore}</div>\n\n    </header>)\n}","import React from \"react\";\n\nexport default (props) => {\n    return (\n        <div className=\"tile\" onClick={() => props.handleTileClick(props.id)}>\n            <div className=\"img\">\n            <img alt={props.player} src={props.image}/>\n            </div>\n            {props.char}\n        </div>\n    );\n}","import React, {\n  Component\n} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Tile from \"./components/Tile\"\n\nfunction resetChecked(arr) {\n  arr.forEach(player => player.checked = false )\n};\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    topscore: 0,\n    message: \"Click a 76er to start!\",\n    tiles: [\n      { id: 0, player: \"Amir Johnson\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/101161.png\", checked: false },\n      { id: 1, player: \"Ben Simmons\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/1627732.png\", checked: false },\n      { id: 2, player: \"Jimmy Butler\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/202710.png\", checked: false },\n      { id: 3, player: \"JJ Redick\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/200755.png\", checked: false },\n      { id: 4, player: \"Joel Embiid\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/203954.png\", checked: false },\n      { id: 5, player: \"Jonah Bolden\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/1628413.png\", checked: false },\n      { id: 6, player: \"Markelle Fultz\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/1628365.png\", checked: false },\n      { id: 7, player: \"Landry Shamet\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/1629013.png\", checked: false },\n      { id: 8, player: \"Mike Muscala\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/203488.png\", checked: false },\n      { id: 9, player: \"Shake Milton\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/1629003.png\", checked: false },\n      { id: 10, player: \"TJ McConnell\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/204456.png\", checked: false },\n      { id: 11, player: \"Wilson Chandler\", image: \"https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/201163.png\", checked: false }\n    ]\n  };\n\n\n\n  handleTileClick = (id) => {\n    this.state.tiles.forEach((tile) => {\n      if (tile.id === id) {\n        if (tile.checked === true) {\n          this.setState({ message: \"Wrong! Try again!\" })\n          if (this.state.currentScore > this.state.topscore) {\n            this.setState({ topscore: this.state.currentScore });\n            this.setState({ currentScore: 0 });\n            resetChecked(this.state.tiles)\n\n          } else {\n            this.setState({ currentScore: 0 });\n          }\n        } else {\n          tile.checked = true;\n          this.setState({ currentScore: this.state.currentScore + 1 });\n          this.setState({ message: \"Correct!\" });\n          let tiles = this.state.tiles.slice(0);\n        tiles.sort(() => Math.random() - 0.5);\n        this.setState({tiles})\n\n        }\n        \n        }\n    })\n    \n    }\n\n  render() {\n    return (<div>\n      <Header currentScore={this.state.currentScore}\n              topscore={this.state.topscore}\n              message={this.state.message} />\n      <div className=\"game-board\">\n        {this.state.tiles.map((tile, i) => <Tile\n          key={i}\n          id={tile.id}\n          handleTileClick={this.handleTileClick}\n          char={tile.player}\n          image={tile.image}\n         />)} </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}